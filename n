local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Anime Simulator | Blackbeard Farm | NS HUB",
    SubTitle = "",
    TabWidth = 120,
    Size = UDim2.fromOffset(500, 400),
    Acrylic = false, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Dark",
    Transparency = false,
    MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
})

--Fluent provides Lucide Icons https://lucide.dev/icons/ for the tabs, icons are optional
local Tabs = {
    Main = Window:AddTab({ Title = "Blackbeard", Icon = "swords" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

local Options = Fluent.Options

do
    Fluent:Notify({
        Title = "Notification",
        Content = "This is a notification",
        SubContent = "SubContent", -- Optional
        Duration = 5 -- Set to nil to make the notification not disappear
    })

    local toggleFarmValue = false
local toggleDodgeValue = false
local cameraLocked = false
local mouseLocked = false
local teleporting = false
local heartbeatConnection = nil
local platform = nil
local fallbackCFrame = CFrame.new(4926.21777, 307.34848, 27086.5449, -0.707648396, 1.07886962e-07, 0.706564724, 8.78638389e-08, 1, -6.46936584e-08, -0.706564724, 1.63011276e-08, -0.707648396)
local cameraOffset = Vector3.new(0, 50, 0)  -- Adjust this to change camera height
local userInputService = game:GetService("UserInputService")

local function findTarget()
    local enemyFolder = workspace.SharedObjects.Characters
    local blackbeard = enemyFolder:FindFirstChild("BlackBeard")
    
    if blackbeard and blackbeard:IsA("Model") and blackbeard:FindFirstChild("belt_low") then
        return blackbeard
    end
    
    return nil
end

local function createPlatform()
    if not platform then
        platform = Instance.new("Part")
        platform.Size = Vector3.new(10, 1, 10)
        platform.Anchored = true
        platform.CanCollide = false
        platform.Parent = workspace
    end
end

local function updatePlatformPosition(enemyBeltLow)
    if platform then
        local success, err = pcall(function()
            local characterHRP = game.Players.LocalPlayer.Character.HumanoidRootPart
            local characterPosition = characterHRP.Position
            local platformPosition = Vector3.new(characterPosition.X, characterPosition.Y - 2, characterPosition.Z)
            platform.Position = platformPosition
        end)
        
        if not success then
            warn("Made By Nameless Scripts, Discord : NS HUB")
        end
    end
end

local function isTsunamiWaveInRadius()
    local tsunamiWave = workspace.CombatEffects:FindFirstChild("TsunamiWave")
    if tsunamiWave then
        local characterHRP = game.Players.LocalPlayer.Character.HumanoidRootPart
        local distance = (tsunamiWave.Position - characterHRP.Position).Magnitude
        return distance <= 500
    end
    return false
end

local function teleportToEnemy(enemy)
    if enemy and not enemy:IsA("Player") then
        local success, err = pcall(function()
            local humanoidRootPart = game.Players.LocalPlayer.Character.HumanoidRootPart
            local enemyBeltLow = enemy.belt_low
            local offset = (toggleDodgeValue and isTsunamiWaveInRadius()) and Vector3.new(0, 190, 10) or Vector3.new(0, 10, 10)
            local behindPosition = enemyBeltLow.CFrame * CFrame.new(offset)
            local lookAtEnemy = CFrame.new(behindPosition.Position, enemyBeltLow.Position)
            humanoidRootPart.CFrame = lookAtEnemy
            updatePlatformPosition(enemyBeltLow)
        end)
        
        if not success then
            warn("Made By Nameless Scripts, Discord : NS HUB")
        end
    end
end

local function teleportToFallback()
    local success, err = pcall(function()
        local humanoidRootPart = game.Players.LocalPlayer.Character.HumanoidRootPart
        humanoidRootPart.CFrame = fallbackCFrame
    end)
    
    if not success then
        warn("Made By Nameless Scripts, Discord : NS HUB")
    end
end

local function updateCamera()
    if cameraLocked then
        local target = findTarget()
        if target and target:FindFirstChild("belt_low") then
            local camera = workspace.CurrentCamera
            camera.CameraType = Enum.CameraType.Scriptable
            local targetPosition = target.belt_low.Position
            local cameraPosition = targetPosition + cameraOffset
            camera.CFrame = CFrame.new(cameraPosition, targetPosition)
        end
    else
        workspace.CurrentCamera.CameraType = Enum.CameraType.Custom
    end
end

local function updateMousePosition()
    if mouseLocked then
        local target = findTarget()
        if target and target:FindFirstChild("belt_low") then
            local camera = workspace.CurrentCamera
            local viewportPoint = camera:WorldToViewportPoint(target.belt_low.Position)
            userInputService.MouseBehavior = Enum.MouseBehavior.LockCenter
            userInputService.MouseIcon = "rbxasset://textures/Cursors/CrossCursor.png"
            userInputService.MouseLocation = Vector2.new(viewportPoint.X, viewportPoint.Y)
        end
    else
        userInputService.MouseBehavior = Enum.MouseBehavior.Default
        userInputService.MouseIcon = ""
    end
end

local function onHeartbeat()
    local success, err = pcall(function()
        if toggleFarmValue then
            local target = findTarget()
            if target then
                createPlatform()
                teleportToEnemy(target)
                updateCamera()
                updateMousePosition()
            else
                -- Reset camera lock if BlackBeard is not found
                if cameraLocked then
                    workspace.CurrentCamera.CameraType = Enum.CameraType.Custom
                    cameraLocked = false
                end
                teleportToFallback()
            end
        end
    end)
    
    if not success then
        warn("Made By Nameless Scripts, Discord : NS HUB")
    end
end

local AutoFarmToggle = Tabs.Main:AddToggle("ToggleAutoFarmRaid", {
    Title = "Auto Farm Black Beard V1",
    Default = false,
})

local AutoDodgeToggle = Tabs.Main:AddToggle("ToggleAutoDodgeTsunami", {
    Title = "Auto Dodge V1",
    Default = false,
})

local CameraLockToggle = Tabs.Main:AddToggle("ToggleCameraLock", {
    Title = "Lock on Black Beard",
    Default = false,
})

local MouseLockToggle = Tabs.Main:AddToggle("ToggleMouseLock", {
    Title = "Lock Skill",
    Default = false,
})

local function startTeleporting()
    local success, err = pcall(function()
        teleporting = true
        if not heartbeatConnection then
            heartbeatConnection = game:GetService("RunService").Heartbeat:Connect(onHeartbeat)
        end
    end)
    
    if not success then
        warn("Made By Nameless Scripts, Discord : NS HUB")
    end
end

local function stopTeleporting()
    local success, err = pcall(function()
        teleporting = false
        if heartbeatConnection then
            heartbeatConnection:Disconnect()
            heartbeatConnection = nil
        end
    end)
    
    if not success then
        warn("Made By Nameless Scripts, Discord : NS HUB")
    end
end

local function checkAutoFarmToggle()
    local success, err = pcall(function()
        toggleFarmValue = AutoFarmToggle.Value
        if toggleFarmValue then
            startTeleporting()
        else
            stopTeleporting()
        end
    end)
    
    if not success then
        warn("Made By Nameless Scripts, Discord : NS HUB")
    end
end

local function checkAutoDodgeToggle()
    local success, err = pcall(function()
        toggleDodgeValue = AutoDodgeToggle.Value
    end)
    
    if not success then
        warn("Made By Nameless Scripts, Discord : NS HUB")
    end
end

local function checkCameraLockToggle()
    local success, err = pcall(function()
        cameraLocked = CameraLockToggle.Value
    end)
    
    if not success then
        warn("Made By Nameless Scripts, Discord : NS HUB")
    end
end

local function checkMouseLockToggle()
    local success, err = pcall(function()
        mouseLocked = MouseLockToggle.Value
    end)
    
    if not success then
        warn("Made By Nameless Scripts, Discord : NS HUB")
    end
end

AutoFarmToggle:OnChanged(checkAutoFarmToggle)
AutoDodgeToggle:OnChanged(checkAutoDodgeToggle)
CameraLockToggle:OnChanged(checkCameraLockToggle)
MouseLockToggle:OnChanged(checkMouseLockToggle)

checkAutoFarmToggle()
checkAutoDodgeToggle()
checkCameraLockToggle()
checkMouseLockToggle()

local ToggleSection = Tabs.Main:AddSection("Black Beard V2", {
})

local toggleFarmValue = false
local toggleDodgeValue = false
local cameraLocked = false
local mouseLocked = false
local teleporting = false
local heartbeatConnection = nil
local platform = nil
local blackbeardCFrame = CFrame.new(4918.12744, 293.128052, 27510.8945, -0.953935981, 7.47582831e-08, 0.300010294, 4.62585632e-08, 1, -1.02098419e-07, -0.300010294, -8.3517314e-08, -0.953935981)
local fallbackCFrame = CFrame.new(4898.2251, 307.348663, 27106.8652, -0.995599568, 2.44441996e-08, -0.0937095433, 1.8985693e-08, 1, 5.91407314e-08, 0.0937095433, 5.71013494e-08, -0.995599568)
local cameraOffset = Vector3.new(0, 50, 50)  -- Adjusted to move camera back and up
local cameraAngle = CFrame.Angles(math.rad(-30), 0, 0)  -- Tilt camera down slightly
local userInputService = game:GetService("UserInputService")

local function isTsunamiWaveInRadius()
    local tsunamiWave = workspace.CombatEffects:FindFirstChild("TsunamiWave")
    if tsunamiWave then
        local characterHRP = game.Players.LocalPlayer.Character.HumanoidRootPart
        local distance = (tsunamiWave.Position - characterHRP.Position).Magnitude
        return distance <= 500
    end
    return false
end

local function isBlackbeardPresent()
    local enemyFolder = workspace.SharedObjects.Characters
    local blackbeard = enemyFolder:FindFirstChild("BlackBeard")
    
    return blackbeard and blackbeard:IsA("Model") and blackbeard:FindFirstChild("belt_low")
end

local function createPlatform()
    if not platform then
        platform = Instance.new("Part")
        platform.Size = Vector3.new(10, 1, 10)
        platform.Anchored = true
        platform.CanCollide = false
        platform.Transparency = 0.5  -- Make it slightly visible
        platform.Parent = workspace
    end
end

local function updatePlatformPosition()
    if platform then
        local success, err = pcall(function()
            local characterHRP = game.Players.LocalPlayer.Character.HumanoidRootPart
            local characterPosition = characterHRP.Position
            local platformPosition = Vector3.new(characterPosition.X, characterPosition.Y - 2, characterPosition.Z)
            platform.Position = platformPosition
        end)
        
        if not success then
            warn("Support NS HUB")
        end
    end
end

local function teleportToTarget()
    if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local humanoidRootPart = game.Players.LocalPlayer.Character.HumanoidRootPart
        
        if isBlackbeardPresent() then
            local verticalOffset = toggleDodgeValue and isTsunamiWaveInRadius() and 190 or 60
            local offset = Vector3.new(0, verticalOffset, 0)
            local downwardRotation = CFrame.Angles(math.rad(-81), 0, 0)
            humanoidRootPart.CFrame = blackbeardCFrame * CFrame.new(offset) * downwardRotation
        else
            humanoidRootPart.CFrame = fallbackCFrame
        end
        
        updatePlatformPosition()
    end
end

local function updateCamera()
    if cameraLocked then
        local camera = workspace.CurrentCamera
        camera.CameraType = Enum.CameraType.Scriptable
        local targetPosition = blackbeardCFrame.Position
        local cameraPosition = targetPosition + cameraOffset
        camera.CFrame = CFrame.new(cameraPosition, targetPosition) * cameraAngle
    else
        workspace.CurrentCamera.CameraType = Enum.CameraType.Custom
    end
end

local function updateMousePosition()
    if mouseLocked then
        local camera = workspace.CurrentCamera
        local viewportPoint = camera:WorldToViewportPoint(blackbeardCFrame.Position)
        userInputService.MouseBehavior = Enum.MouseBehavior.LockCenter
        userInputService.MouseIcon = "rbxasset://textures/Cursors/CrossCursor.png"
        userInputService:SetMouseLocation(viewportPoint.X, viewportPoint.Y)
    else
        userInputService.MouseBehavior = Enum.MouseBehavior.Default
        userInputService.MouseIcon = ""
    end
end

local function onHeartbeat()
    local success, err = pcall(function()
        if toggleFarmValue then
            createPlatform()
            teleportToTarget()
            updateCamera()
            updateMousePosition()
        end
    end)
    
    if not success then
        warn("Support NS HUB")
    end
end

local AutoFarmToggle = Tabs.Main:AddToggle("ToggleAutoFarmRaid", {
    Title = "Auto Farm Black Beard V2",
    Default = false,
})

local AutoDodgeToggle = Tabs.Main:AddToggle("ToggleAutoDodgeTsunami", {
    Title = "Auto Dodge",
    Default = false,
})

local CameraLockToggle = Tabs.Main:AddToggle("ToggleCameraLock", {
    Title = "Lock on Black Beard",
    Default = false,
})

local MouseLockToggle = Tabs.Main:AddToggle("ToggleMouseLock", {
    Title = "Lock Skill",
    Default = false,
})

local function startTeleporting()
    local success, err = pcall(function()
        teleporting = true
        if not heartbeatConnection then
            heartbeatConnection = game:GetService("RunService").Heartbeat:Connect(onHeartbeat)
        end
    end)
    
    if not success then
        warn("Support NS HUB")
    end
end

local function stopTeleporting()
    local success, err = pcall(function()
        teleporting = false
        if heartbeatConnection then
            heartbeatConnection:Disconnect()
            heartbeatConnection = nil
        end
        if platform then
            platform:Destroy()
            platform = nil
        end
    end)
    
    if not success then
        warn("Support NS HUB")
    end
end

local function checkAutoFarmToggle()
    local success, err = pcall(function()
        toggleFarmValue = AutoFarmToggle.Value
        if toggleFarmValue then
            startTeleporting()
        else
            stopTeleporting()
        end
    end)
    
    if not success then
        warn("Support NS HUB")
    end
end

local function checkAutoDodgeToggle()
    local success, err = pcall(function()
        toggleDodgeValue = AutoDodgeToggle.Value
    end)
    
    if not success then
        warn("Support NS HUB")
    end
end

AutoFarmToggle:OnChanged(checkAutoFarmToggle)
AutoDodgeToggle:OnChanged(checkAutoDodgeToggle)
CameraLockToggle:OnChanged(function()
    cameraLocked = CameraLockToggle.Value
    if not cameraLocked then
        workspace.CurrentCamera.CameraType = Enum.CameraType.Custom
    end
end)
MouseLockToggle:OnChanged(function()
    mouseLocked = MouseLockToggle.Value
    if not mouseLocked then
        userInputService.MouseBehavior = Enum.MouseBehavior.Default
        userInputService.MouseIcon = ""
    end
end)

checkAutoFarmToggle()
checkAutoDodgeToggle()



local Tabs = {
    Main = Window:AddTab({ Title = "Misc", Icon = "flame" }),
}

            local Toggle = Tabs.Main:AddToggle("ToogleAntiAFK", {Title = "Anti AFK", Default = false })

            local function AntiAFK()
                local Players = game:GetService("Players")
                local VirtualUser = game:GetService("VirtualUser")
            
                local function ResetStatus()
                    print("Status: 123")
                end
            
                Players.LocalPlayer.Idled:Connect(function()
                    VirtualUser:CaptureController()
                    VirtualUser:ClickButton2(Vector2.new())
                    print("Best Scripter Nameless Scripts")
                    wait(2)
                    ResetStatus()
                end)
            end
            
            local function checkToggle()
                if Toggle.Value then
                    AntiAFK()
                end
            end
            
            Toggle:OnChanged(checkToggle)
            checkToggle()        


local Tabs = {
    Main = Window:AddTab({ Title = "Other", Icon = "book" }),
}


Tabs.Main:AddButton({
    Title = "Remove Notifications",
    Callback = function()
        local player = game.Players.LocalPlayer
        local playerGui = player:FindFirstChild("PlayerGui")
        if playerGui then
            local inset = playerGui:FindFirstChild("Inset")
            if inset then
                local notifications = inset:FindFirstChild("Notifications")
                if notifications then
                    notifications:Destroy()
                end
            end
        end
    end
})

            local Keybind = Tabs.Main:AddKeybind("Keybind", {
                Title = "KeyBind",
                Mode = "Toggle", -- Always, Toggle, Hold
                Default = "K", -- String as the name of the keybind (MB1, MB2 for mouse buttons)
        
                -- Occurs when the keybind is clicked, Value is `true`/`false`
                Callback = function(Value)
                    print("Keybind clicked!", Value)
                end,
        
                -- Occurs when the keybind itself is changed, `New` is a KeyCode Enum OR a UserInputType Enum
                ChangedCallback = function(New)
                    print("Keybind changed!", New)
                end
            })
        
            -- OnClick is only fired when you press the keybind and the mode is Toggle
            -- Otherwise, you will have to use Keybind:GetState()
            Keybind:OnClick(function()
                print("Keybind clicked:", Keybind:GetState())
            end)
        
            Keybind:OnChanged(function()
                print("Keybind changed:", Keybind.Value)
            end)
        
            task.spawn(function()
                while true do
                    wait(1)
        
                    -- example for checking if a keybind is being pressed
                    local state = Keybind:GetState()
                    if state then
                        print("Keybind is being held down")
                    end
        
                    if Fluent.Unloaded then break end
                end
            end)
        
            Keybind:SetValue("K", "Toggle") -- Sets keybind to MB2, mode to Hold


    local Input = Tabs.Main:AddInput("Input", {
        Title = "Input",
        Default = "Default",
        Placeholder = "Placeholder",
        Numeric = false, -- Only allows numbers
        Finished = false, -- Only calls callback when you press enter
        Callback = function(Value)
            print("Input changed:", Value)
        end
    })

    Input:OnChanged(function()
        print("Input updated:", Input.Value)
    end)
end


-- Addons:
-- SaveManager (Allows you to have a configuration system)
-- InterfaceManager (Allows you to have a interface managment system)

-- Hand the library over to our managers
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- You can add indexes of elements the save manager should ignore
SaveManager:SetIgnoreIndexes({})

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)


Window:SelectTab(1)

local Players = game:GetService("Players")
local PlayerGui = Players.LocalPlayer:WaitForChild("PlayerGui")
local UserInputService = game:GetService("UserInputService")

local screenGui = Instance.new("ScreenGui")
screenGui.Name = "ToggleButtonGui"
screenGui.ResetOnSpawn = false
screenGui.Parent = PlayerGui

local imageButton = Instance.new("ImageButton")
imageButton.Name = "ToggleButton"
imageButton.Size = UDim2.new(0, 57, 0, 48)
imageButton.Position = UDim2.new(0.1514671, 0, 0.15256618, 0)
imageButton.Image = "http://www.roblox.com/asset/?id=18470383829"
imageButton.Parent = screenGui

local uiCorner = Instance.new("UICorner")
uiCorner.Parent = imageButton

-- Function to toggle the Fluent UI
local function toggleUI()
    Window:Minimize()
end

-- Connect the toggle function to the button
imageButton.MouseButton1Click:Connect(toggleUI)

-- Draggable functionality
local dragging
local dragInput
local dragStart
local startPos

local function update(input)
    local delta = input.Position - dragStart
    imageButton.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
end

imageButton.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = imageButton.Position
        
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

imageButton.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        dragInput = input
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        update(input)
    end
end)

Fluent:Notify({
    Title = "Made By : Nameless Scripts",
    Content = "Dungeon Quest Script Loaded",
    Duration = 5
})

-- You can use the SaveManager:LoadAutoloadConfig() to load a config
-- which has been marked to be one that auto loads!
SaveManager:LoadAutoloadConfig()
